type syscall = {
  name : string;
  args : (int * string) list;
}

let string_of_rule ~action (x : syscall) =
  Printf.sprintf
    "  if (seccomp_rule_add(ctx, %s, SCMP_SYS(%s), %d%s) < 0) { goto out; }"
    action x.name (List.length x.args)
    (match x.args with
    | [] -> ""
    | _ ->
        ", "
        ^
        if x.name = "ioctl" then
          String.concat ", "
            (List.map
               (fun (n, arg) ->
                 Printf.sprintf
                   "SCMP_A%d(SCMP_CMP_MASKED_EQ, 0xFFFFFFFFu, (int) %s)" n arg)
               x.args)
        else
          String.concat ", "
            (List.map
               (fun (n, arg) ->
                 Printf.sprintf "SCMP_A%d(SCMP_CMP_EQ, %s)" n arg)
               x.args))

let write_c_file ~name ~default_action ~(blacklist : syscall list)
    ~(whitelist : syscall list) =
  FileUtil.mkdir ~parent:true Config.seccomp_bpf_output_dir;
  let file_name = FilePath.concat Config.seccomp_bpf_output_dir (name ^ ".c") in
  CCIO.with_out file_name (fun oc ->
      let write_line = CCIO.write_line oc in
      write_line
        {|
/*
 * File is generated by code generator in https://github.com/darrenldl/sandboxing
 *
 * File is based on example provided by libseccomp
 * and exportFilter.c from https://github.com/valoq/bwscripts
 * and https://github.com/Whonix/sandbox-app-launcher
 */

/*
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2.1 of the GNU Lesser General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses>.
 */
|};
      write_line "#include <stddef.h>";
      write_line "#include <fcntl.h>";
      write_line "#include <errno.h>";
      write_line "#include <unistd.h>";
      write_line "#include <seccomp.h>";
      write_line "#include <sys/ioctl.h>";
      write_line "#include <sys/socket.h>";
      write_line "#include <sys/mman.h>";
      write_line "#include <linux/shm.h>";
      write_line "#include <linux/random.h>";
      write_line "#include <linux/vt.h>";
      write_line "";
      write_line "int main (void) {";
      write_line "  int rc = -1;";
      write_line "  scmp_filter_ctx ctx;";
      write_line "  int filter_fd;";
      write_line "";
      write_line (Printf.sprintf "  ctx = seccomp_init(%s);" default_action);
      write_line "  if (ctx == NULL) { goto out; }";
      write_line "";
      List.iter
        (fun x -> write_line (string_of_rule ~action:"SCMP_ACT_KILL" x))
        blacklist;
      List.iter
        (fun x -> write_line (string_of_rule ~action:"SCMP_ACT_ALLOW" x))
        whitelist;
      write_line "";
      write_line
        (Printf.sprintf
           "  filter_fd = open(\"%s%s\", O_CREAT | O_WRONLY | O_TRUNC, 0644);"
           name Config.seccomp_bpf_suffix);
      write_line "  if (filter_fd == -1) {";
      write_line "    rc = -errno;";
      write_line "    goto out;";
      write_line "  }";
      write_line "  rc = seccomp_export_bpf(ctx, filter_fd);";
      write_line "  if (rc < 0) {";
      write_line "    close(filter_fd);";
      write_line "    goto out;";
      write_line "  }";
      write_line "  close(filter_fd);";
      write_line "";
      write_line "out:";
      write_line "  seccomp_release(ctx);";
      write_line "  return -rc;";
      write_line "}");
  FileUtil.chmod (`Octal 0o664) [ file_name ]
