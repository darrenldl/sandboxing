type syscall =
  | Sysctl
  | Acct
  | Add_key
  | Adjtimex
  | Afs_syscall
  | Bdflush
  | Bpf
  | Break
  | Chroot
  | Clock_adjtime
  | Clock_settime
  | Create_module
  | Delete_module
  | Fanotify_init
  | Finit_module
  | Ftime
  | Get_kernel_syms
  | Getpmsg
  | Gtty
  | Get_mempolicy
  | Init_module
  | Io_cancel
  | Io_destroy
  | Io_getevents
  | Io_setup
  | Io_submit
  | Ioperm
  | Iopl
  | Ioprio_set
  | Kcmp
  | Kexec_file_load
  | Kexec_load
  | Keyctl
  | Lock
  | Lookup_dcookie
  | Mbind
  | Migrate_pages
  | Modify_ldt
  | Mount
  | Move_pages
  | Mpx
  | Name_to_handle_at
  | Nfsservctl
  | Open_by_handle_at
  | Pciconfig_iobase
  | Pciconfig_read
  | Pciconfig_write
  | Perf_event_open
  | Personality
  | Pivot_root
  | Process_vm_readv
  | Process_vm_writev
  | Prof
  | Profil
  | Ptrace
  | Putpmsg
  | Query_module
  | Reboot
  | Remap_file_pages
  | Request_key
  | Rtas
  | S390_pci_mmio_read
  | S390_pci_mmio_write
  | S390_runtime_instr
  | Security
  | Set_mempolicy
  | Setdomainname
  | Sethostname
  | Settimeofday
  | Sgetmask
  | Ssetmask
  | Stime
  | Stty
  | Subpage_prot
  | Swapoff
  | Swapon
  | Switch_endian
  | Sysfs
  | Syslog
  | Tuxcall
  | Ulimit
  | Umount
  | Umount2
  | Uselib
  | Userfaultfd
  | Ustat
  | Vhangup
  | Vm86
  | Vm86old
  | Vmsplice
  | Vserver

let string_of_syscall (x : syscall) : string =
  match x with
  | Sysctl -> "_sysctl"
  | Acct -> "acct"
  | Add_key -> "add_key"
  | Adjtimex -> "adjtimex"
  | Afs_syscall -> "afs_syscall"
  | Bdflush -> "bdflush"
  | Bpf -> "bpf"
  | Break -> "break"
  | Chroot -> "chroot"
  | Clock_adjtime -> "clock_adjtime"
  | Clock_settime -> "clock_settime"
  | Create_module -> "create_module"
  | Delete_module -> "delete_module"
  | Fanotify_init -> "fanotify_init"
  | Finit_module -> "finit_module"
  | Ftime -> "ftime"
  | Get_kernel_syms -> "get_kernel_syms"
  | Getpmsg -> "getpmsg"
  | Gtty -> "gtty"
  | Get_mempolicy -> "get_mempolicy"
  | Init_module -> "init_module"
  | Io_cancel -> "io_cancel"
  | Io_destroy -> "io_destroy"
  | Io_getevents -> "io_getevents"
  | Io_setup -> "io_setup"
  | Io_submit -> "io_submit"
  | Ioperm -> "ioperm"
  | Iopl -> "iopl"
  | Ioprio_set -> "ioprio_set"
  | Kcmp -> "kcmp"
  | Kexec_file_load -> "kexec_file_load"
  | Kexec_load -> "kexec_load"
  | Keyctl -> "keyctl"
  | Lock -> "lock"
  | Lookup_dcookie -> "lookup_dcookie"
  | Mbind -> "mbind"
  | Migrate_pages -> "migrate_pages"
  | Modify_ldt -> "modify_ldt"
  | Mount -> "mount"
  | Move_pages -> "move_pages"
  | Mpx -> "mpx"
  | Name_to_handle_at -> "name_to_handle_at"
  | Nfsservctl -> "nfsservctl"
  | Open_by_handle_at -> "open_by_handle_at"
  | Pciconfig_iobase -> "pciconfig_iobase"
  | Pciconfig_read -> "pciconfig_read"
  | Pciconfig_write -> "pciconfig_write"
  | Perf_event_open -> "perf_event_open"
  | Personality -> "personality"
  | Pivot_root -> "pivot_root"
  | Process_vm_readv -> "process_vm_readv"
  | Process_vm_writev -> "process_vm_writev"
  | Prof -> "prof"
  | Profil -> "profil"
  | Ptrace -> "ptrace"
  | Putpmsg -> "putpmsg"
  | Query_module -> "query_module"
  | Reboot -> "reboot"
  | Remap_file_pages -> "remap_file_pages"
  | Request_key -> "request_key"
  | Rtas -> "rtas"
  | S390_pci_mmio_read -> "s390_pci_mmio_read"
  | S390_pci_mmio_write -> "s390_pci_mmio_read"
  | S390_runtime_instr -> "s390_runtime_instr"
  | Security -> "security"
  | Set_mempolicy -> "set_mempolicy"
  | Setdomainname -> "setdomainname"
  | Sethostname -> "sethostname"
  | Settimeofday -> "settimeofday"
  | Sgetmask -> "sgetmask"
  | Ssetmask -> "ssetmask"
  | Stime -> "stime"
  | Stty -> "stty"
  | Subpage_prot -> "subpage_prot"
  | Swapoff -> "swapoff"
  | Swapon -> "swapon"
  | Switch_endian -> "switch_endian"
  | Sysfs -> "sysfs"
  | Syslog -> "syslog"
  | Tuxcall -> "tuxcall"
  | Ulimit -> "ulimit"
  | Umount -> "umount"
  | Umount2 -> "umount2"
  | Uselib -> "uselib"
  | Userfaultfd -> "userfaultfd"
  | Ustat -> "ustat"
  | Vhangup -> "vhangup"
  | Vm86 -> "vm86"
  | Vm86old -> "vm86old"
  | Vmsplice -> "vmsplice"
  | Vserver -> "vserver"

let write_c_file ~name ~(blacklist : syscall list) =
  FileUtil.mkdir ~parent:true Config.seccomp_bpf_output_dir;
  let file_name = FilePath.concat Config.seccomp_bpf_output_dir (name ^ ".c") in
  CCIO.with_out file_name (fun oc ->
      let write_line = CCIO.write_line oc in
      write_line
        {|
/*
 * File is generated by code generator in https://github.com/darrenldl/sandboxing
 *
 * File is based on example provided by libseccomp
 * and exportFilter.c from https://github.com/valoq/bwscripts
 */

/*
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of version 2.1 of the GNU Lesser General Public License as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses>.
 */
|};
      write_line "#include <stddef.h>";
      write_line "#include <errno.h>";
      write_line "#include <fcntl.h>";
      write_line "#include <unistd.h>";
      write_line "#include <seccomp.h>";
      write_line "";
      write_line "int main (void) {";
      write_line "  int rc = -1;";
      write_line "  scmp_filter_ctx ctx;";
      write_line "  int filter_fd;";
      write_line "";
      write_line "  ctx = seccomp_init(SCMP_ACT_ALLOW);";
      write_line "  if (ctx == NULL) { goto out; }";
      write_line "";
      List.iter
        (fun x ->
           let s = string_of_syscall x in
           write_line
             (Printf.sprintf
                "  if (seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(%s), 0) < \
                 0) { goto out; }"
                s))
        blacklist;
      write_line "";
      write_line
        (Printf.sprintf
           "  filter_fd = open(\"%s%s\", O_CREAT | O_WRONLY | O_TRUNC, 0644);"
           name Config.seccomp_bpf_suffix);
      write_line "  if (filter_fd == -1) {";
      write_line "    rc = -errno;";
      write_line "    goto out;";
      write_line "  }";
      write_line "  rc = seccomp_export_bpf(ctx, filter_fd);";
      write_line "  if (rc < 0) {";
      write_line "    close(filter_fd);";
      write_line "    goto out;";
      write_line "  }";
      write_line "  close(filter_fd);";
      write_line "";
      write_line "out:";
      write_line "  seccomp_release(ctx);";
      write_line "  return -rc;";
      write_line "}");
  FileUtil.chmod (`Octal 0o664) [ file_name ]
